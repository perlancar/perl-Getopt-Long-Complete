#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;
use Complete::Util qw(complete_array_elem);
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

my %opts = (cols => 1, bg=>0);
my $res = GetOptionsWithCompletion(
    sub {
        my %args = @_;
        my $word = $args{word};
        my $type = $args{type};

        if ($type eq 'arg') {
            my $argpos = $args{argpos};
            return complete_array_elem(
                array=>["arg$argpos-a", "arg$argpos-b"], word=>$word);
        } elsif ($type eq 'optval') {
            my $opt = $args{opt};
            if ($opt eq '--int-comp-array') {
                return complete_array_elem(array=>[1..10], word=>$word);
            } elsif ($opt eq '--str-comp-sub') {
                return complete_array_elem(array=>[map {"$word$_"} "a".."z"],
                                           word=>$word);
            } elsif ($opt eq '--module' || $opt eq '-M') {
                return {
                    words => complete_array_elem(
                        array=>[
                            "Complete::Util",
                            "Text::ANSITable",
                            "Text::ANSI::",
                            "Text::ANSI::Util",
                        ],
                        word=>$word,
                    ),
                    path_sep => '::',
                };
            }
        }

        undef;
    },
    'flag1|1' => sub{},
    'flag2|f' => sub{},
    'bool|b!' => sub{},
    'int=i' => sub{},
    'module|M=s' => sub{},
    'float|F=f' => sub{},
    'str|text|S=s' => sub{},
    'array=s@' => sub{},
    'int-comp-array=i' => sub{},
    'str-comp-sub=s' => sub{},

    'version|v' => sub{
        no warnings;
        say "test-getopt-long-complete version $main::VERSION";
        exit 0;
    },
    'help|h|?' => sub {
        print <<_;
Usage:
  $0 --help (or -h, -?)
  $0 [opts]

Options:
  --flag1, -1
  --flag2, -f
  --(no)bool, -b
  --int=i
  --float=f, -F
  --str=s, --text, -S
  --array=s@
  --int-comp-array=i
  --str-comp-sub=s
_
        exit 0;
    },
);

#say $res ? "Getopt failed" : "Getopt succeeded";
# ABSTRACT: Script to demonstrate Getopt::Long::Complete
# PODNAME:

=head1 SYNOPSIS

Activate completion using (can be put in your bash startup file):

 % complete -C demo-getopt-long-complete demo-getopt-long-complete

Test completion:

 % demo-getopt-long-complete <tab>
 % demo-getopt-long-complete -<tab>
 % demo-getopt-long-complete --int 1 -<tab>
 # and so on

=head2
