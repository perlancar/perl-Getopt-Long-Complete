#!/usr/bin/env perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;
use Complete::Util qw(complete_array_elem);
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

my %opts = (cols => 1, bg=>0);
my $res = GetOptionsWithCompletion(
    {
        'int-comp-array=i' => [1..10],
        'str-comp-sub=s' => sub {
            my %args = @_;
            my $word = $args{word} // '';
            complete_array_elem(array=>[map {"$word$_"} "a".."z"],
                                word=>$word, ci=>1);
        },
    },
    'flag1' => sub{},
    'flag2|f' => sub{},
    'bool!' => sub{},
    'int=i' => sub{},
    'float|F=f' => sub{},
    'str=s' => sub{},
    'array=s@' => sub{},
    'int-comp-array=i' => sub{},
    'str-comp-sub=s' => sub{},

    'version|v' => sub{
        no warnings;
        say "test-getopt-long-complete version $main::VERSION";
        exit 0;
    },
    'help|h|?' => sub {
        print <<_;
Usage:
  $0 --help (or -h, -?)
  $0 [opts]

Options:
  --flag1
  --flag2, -f
  --(no)bool
  --int=i
  --float=f, -F
  --str=s
  --array=s@
  --int-comp-array=i
  --str-comp-sub=s
_
        exit 0;
    },
);

#say $res ? "Getopt failed" : "Getopt succeeded";
# ABSTRACT: Script to demonstrate Complete::Getopt::Long
# PODNAME: demo-getopt-long-complete

=head1 SYNOPSIS

Activate completion using (can be put in your bash startup file):

 % complete -C demo-getopt-long-complete demo-getopt-long-complete

Test completion:

 % demo-getopt-long-complete <tab>
 % demo-getopt-long-complete -<tab>
 % demo-getopt-long-complete --int 1 -<tab>
 # and so on

=head2
